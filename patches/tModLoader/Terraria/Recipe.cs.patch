--- src/Terraria/Terraria/Recipe.cs
+++ src/tModLoader/Terraria/Recipe.cs
@@ -3,33 +_,38 @@
 using Terraria.GameContent.Achievements;
 using Terraria.ID;
 using Terraria.Localization;
+using Terraria.ModLoader;
 
 namespace Terraria
 {
-	public class Recipe
+	public sealed partial class Recipe
 	{
 		public static int maxRequirements = 15;
 		public static int maxRecipes = 3000;
 		public static int numRecipes;
+		private static bool _hasDelayedFindRecipes;
 		private static Recipe currentRecipe = new Recipe();
+		
 		public Item createItem = new Item();
 		public Item[] requiredItem = new Item[maxRequirements];
 		public int[] requiredTile = new int[maxRequirements];
 		public int[] acceptedGroups = new int[maxRequirements];
+		
+		#region Legacy
-		public bool needHoney;
+		internal bool needHoney;
-		public bool needWater;
+		internal bool needWater;
-		public bool needLava;
+		internal bool needLava;
-		public bool anyWood;
+		internal bool anyWood;
-		public bool anyIronBar;
+		internal bool anyIronBar;
-		public bool anyPressurePlate;
+		internal bool anyPressurePlate;
-		public bool anySand;
+		internal bool anySand;
-		public bool anyFragment;
+		internal bool anyFragment;
-		public bool alchemy;
+		internal bool alchemy;
-		public bool needSnowBiome;
+		internal bool needSnowBiome;
-		public bool needGraveyardBiome;
+		internal bool needGraveyardBiome;
-		private static bool _hasDelayedFindRecipes;
+		#endregion
-
+		
-		public void RequireGroup(string name) {
+		internal void RequireGroup(string name) {
 			if (!RecipeGroup.recipeGroupIDs.TryGetValue(name, out int value))
 				return;
 
@@ -49,7 +_,7 @@
 			acceptedGroups[num] = value;
 		}
 
-		public void RequireGroup(int id) {
+		internal void RequireGroup(int id) {
 			int num = 0;
 			while (true) {
 				if (num < maxRequirements) {
@@ -66,13 +_,13 @@
 			acceptedGroups[num] = id;
 		}
 
-		public bool ProcessGroupsForText(int type, out string theText) {
+		internal bool ProcessGroupsForText(int type, out string theText) {
 			for (int i = 0; i < maxRequirements; i++) {
 				int num = acceptedGroups[i];
 				if (num == -1)
 					break;
 
-				if (RecipeGroup.recipeGroups[num].ValidItems.Contains(type)) {
+				if (RecipeGroup.recipeGroups[num].ContainsItem(type)) {
 					theText = RecipeGroup.recipeGroups[num].GetText();
 					return true;
 				}
@@ -82,20 +_,22 @@
 			return false;
 		}
 
-		public bool AcceptedByItemGroups(int invType, int reqType) {
+		internal bool AcceptedByItemGroups(int invType, int reqType) {
 			for (int i = 0; i < maxRequirements; i++) {
 				int num = acceptedGroups[i];
 				if (num == -1)
 					break;
 
-				if (RecipeGroup.recipeGroups[num].ValidItems.Contains(invType) && RecipeGroup.recipeGroups[num].ValidItems.Contains(reqType))
+				if (RecipeGroup.recipeGroups[num].ContainsItem(invType) && RecipeGroup.recipeGroups[num].ContainsItem(reqType))
 					return true;
 			}
 
 			return false;
 		}
 
-		public Recipe() {
+		internal Recipe(Mod mod = null) {
+			Mod = mod;
+
 			for (int i = 0; i < maxRequirements; i++) {
 				requiredItem[i] = new Item();
 				requiredTile[i] = -1;
@@ -128,6 +_,8 @@
 					}
 				}
 
+				ConsumeItemHooks?.Invoke(this, item2.type, ref num);
+
 				if (num <= 0)
 					continue;
 
@@ -192,7 +_,8 @@
 			FindRecipes();
 		}
 
+		#region Legacy
-		public bool useWood(int invType, int reqType) {
+		private bool useWood(int invType, int reqType) {
 			if (!anyWood)
 				return false;
 
@@ -223,7 +_,7 @@
 			}
 		}
 
-		public bool useIronBar(int invType, int reqType) {
+		private bool useIronBar(int invType, int reqType) {
 			if (!anyIronBar)
 				return false;
 
@@ -236,7 +_,7 @@
 			return true;
 		}
 
-		public bool useSand(int invType, int reqType) {
+		private bool useSand(int invType, int reqType) {
 			if (reqType != 169 && reqType != 408 && reqType != 1246 && reqType != 370 && reqType != 3272 && reqType != 3338 && reqType != 3274 && reqType != 3275)
 				return false;
 
@@ -246,7 +_,7 @@
 			return false;
 		}
 
-		public bool useFragment(int invType, int reqType) {
+		private bool useFragment(int invType, int reqType) {
 			if (reqType != 3458 && reqType != 3456 && reqType != 3457 && reqType != 3459)
 				return false;
 
@@ -256,7 +_,7 @@
 			return false;
 		}
 
-		public bool usePressurePlate(int invType, int reqType) {
+		private bool usePressurePlate(int invType, int reqType) {
 			if (!anyPressurePlate)
 				return false;
 
@@ -286,6 +_,7 @@
 					}
 			}
 		}
+		#endregion
 
 		public static void GetThroughDelayedFindRecipes() {
 			if (_hasDelayedFindRecipes) {
@@ -310,7 +_,7 @@
 			if (Main.guideItem.type > 0 && Main.guideItem.stack > 0 && Main.guideItem.Name != "") {
 				for (int j = 0; j < maxRecipes && Main.recipe[j].createItem.type != 0; j++) {
 					for (int k = 0; k < maxRequirements && Main.recipe[j].requiredItem[k].type != 0; k++) {
-						if (Main.guideItem.IsTheSameAs(Main.recipe[j].requiredItem[k]) || Main.recipe[j].useWood(Main.guideItem.type, Main.recipe[j].requiredItem[k].type) || Main.recipe[j].useSand(Main.guideItem.type, Main.recipe[j].requiredItem[k].type) || Main.recipe[j].useIronBar(Main.guideItem.type, Main.recipe[j].requiredItem[k].type) || Main.recipe[j].useFragment(Main.guideItem.type, Main.recipe[j].requiredItem[k].type) || Main.recipe[j].AcceptedByItemGroups(Main.guideItem.type, Main.recipe[j].requiredItem[k].type) || Main.recipe[j].usePressurePlate(Main.guideItem.type, Main.recipe[j].requiredItem[k].type)) {
+						if (Main.guideItem.IsTheSameAs(Main.recipe[j].requiredItem[k]) || Main.recipe[j].AcceptedByItemGroups(Main.guideItem.type, Main.recipe[j].requiredItem[k].type)) {
 							Main.availableRecipe[Main.numAvailableRecipes] = j;
 							Main.numAvailableRecipes++;
 							break;
@@ -320,10 +_,9 @@
 			}
 			else {
 				Dictionary<int, int> dictionary = new Dictionary<int, int>();
-				Item[] array = null;
-				Item item = null;
-				array = Main.player[Main.myPlayer].inventory;
-				for (int l = 0; l < 58; l++) {
+				Item item;
+				Item[] array = Main.player[Main.myPlayer].inventory;
+				for (int l = 0; l < array.Length; l++) {
 					item = array[l];
 					if (item.stack > 0) {
 						if (dictionary.ContainsKey(item.netID))
@@ -350,20 +_,18 @@
 						if (item != null && item.stack > 0) {
 							if (dictionary.ContainsKey(item.netID))
 								dictionary[item.netID] += item.stack;
-							else
+							else 
 								dictionary[item.netID] = item.stack;
 						}
 					}
 				}
 
 				for (int n = 0; n < maxRecipes && Main.recipe[n].createItem.type != 0; n++) {
-					bool flag = true;
+					bool flag = true;	
-					if (flag) {
-						for (int num3 = 0; num3 < maxRequirements && Main.recipe[n].requiredTile[num3] != -1; num3++) {
+					for (int num3 = 0; num3 < maxRequirements && Main.recipe[n].requiredTile[num3] != -1; num3++) {
-							if (!Main.player[Main.myPlayer].adjTile[Main.recipe[n].requiredTile[num3]]) {
+						if (!Main.player[Main.myPlayer].adjTile[Main.recipe[n].requiredTile[num3]]) {
-								flag = false;
+							flag = false;
-								break;
+							break;
-							}
 						}
 					}
 
@@ -376,7 +_,7 @@
 							int num5 = item.stack;
 							bool flag2 = false;
 							foreach (int key in dictionary.Keys) {
-								if (Main.recipe[n].useWood(key, item.type) || Main.recipe[n].useSand(key, item.type) || Main.recipe[n].useIronBar(key, item.type) || Main.recipe[n].useFragment(key, item.type) || Main.recipe[n].AcceptedByItemGroups(key, item.type) || Main.recipe[n].usePressurePlate(key, item.type)) {
+								if (Main.recipe[n].AcceptedByItemGroups(key, item.type)) {
 									num5 -= dictionary[key];
 									flag2 = true;
 								}
@@ -401,8 +_,8 @@
 						if (!(num6 && flag3 && flag4 && flag5 && flag6))
 							flag = false;
 					}
-
-					if (flag) {
+					
+					if (flag && RecipeHooks.RecipeAvailable(Main.recipe[n])) {
 						Main.availableRecipe[Main.numAvailableRecipes] = n;
 						Main.numAvailableRecipes++;
 					}
@@ -451,12 +_,16 @@
 			RecipeGroupID.Turtles = RecipeGroup.RegisterGroup("Turtles", rec);
 			rec = new RecipeGroup(() => Lang.misc[37].Value + " " + Language.GetTextValue("Misc.Fruit"), 4009, 4282, 4283, 4284, 4285, 4286, 4287, 4288, 4289, 4290, 4291, 4292, 4293, 4294, 4295, 4296, 4297);
 			RecipeGroupID.Fruit = RecipeGroup.RegisterGroup("Fruit", rec);
+			RecipeGroupHelper.AddOldVanillaGroups();
+			RecipeGroupHelper.AddRecipeGroups();
 		}
 
 		public static void SetupRecipes() {
 			int num = 5;
 			int stack = 2;
 			SetupRecipeGroups();
+			
+			#region Legacy
 			currentRecipe.createItem.SetDefaults(8);
 			currentRecipe.createItem.stack = 3;
 			currentRecipe.requiredItem[0].SetDefaults(23);
@@ -13050,9 +_,14 @@
 			currentRecipe.requiredItem[0].SetDefaults(73);
 			currentRecipe.requiredItem[0].stack = 100;
 			AddRecipe();
+			#endregion
+			
 			CreateReverseWallRecipes();
 			CreateReversePlatformRecipes();
+			RecipeHooks.AddRecipes();
+			RecipeHooks.PostAddRecipes();
 			UpdateWhichItemsAreMaterials();
+			Item.PopulateMaterialCache();
 			UpdateMaterialFieldForAllRecipes();
 		}
 
@@ -13067,7 +_,7 @@
 		}
 
 		public static void UpdateWhichItemsAreMaterials() {
-			for (int i = 0; i < 5045; i++) {
+			for (int i = 0; i < ItemLoader.ItemCount; i++) {
 				Item item = new Item();
 				item.SetDefaults(i, noMatCheck: true);
 				item.checkMat();
@@ -13075,6 +_,7 @@
 			}
 		}
 
+		#region Legacy
 		private static void AddSolarFurniture() {
 			currentRecipe.createItem.SetDefaults(4229);
 			currentRecipe.createItem.stack = 10;
@@ -13962,8 +_,9 @@
 				}
 			}
 		}
-
-		public void SetIngridients(params int[] ingridients) {
+		
+		// meme man: i cn spek engrish
+		private void SetIngridients(params int[] ingridients) {
 			if (ingridients.Length == 1) {
 				ingridients = new int[2] {
 					ingridients[0],
@@ -13981,30 +_,33 @@
 			}
 		}
 
-		public void SetCraftingStation(params int[] tileIDs) {
+		private void SetCraftingStation(params int[] tileIDs) {
 			for (int i = 0; i < tileIDs.Length; i++) {
 				requiredTile[i] = tileIDs[i];
 			}
 		}
 
 		private static void AddRecipe() {
-			if (currentRecipe.requiredTile[0] == 13)
-				currentRecipe.alchemy = true;
+			if (currentRecipe.requiredTile[0] == TileID.Bottles) currentRecipe.AddConsumeItemCallback(ConsumptionRules.Alchemy);
+
+			if (currentRecipe.needGraveyardBiome) currentRecipe.AddCondition(Condition.InGraveyardBiome);
+			if (currentRecipe.needSnowBiome) currentRecipe.AddCondition(Condition.InSnow);
+			if (currentRecipe.needWater) currentRecipe.AddCondition(Condition.NearWater);
+			if (currentRecipe.needLava) currentRecipe.AddCondition(Condition.NearLava);
+			if (currentRecipe.needHoney) currentRecipe.AddCondition(Condition.NearHoney);
+
+			if (currentRecipe.anyFragment) currentRecipe.RequireGroup(RecipeGroupID.Fragment);
+			if (currentRecipe.anySand) currentRecipe.RequireGroup(RecipeGroupID.Sand);
+			if (currentRecipe.anyWood) currentRecipe.RequireGroup(RecipeGroupID.Wood);
+			if (currentRecipe.anyIronBar) currentRecipe.RequireGroup(RecipeGroupID.IronBar);
+			if (currentRecipe.anyPressurePlate) currentRecipe.RequireGroup(RecipeGroupID.PressurePlate);
 
 			Main.recipe[numRecipes] = currentRecipe;
 			currentRecipe = new Recipe();
 			numRecipes++;
 		}
-
-		public static int GetRequiredTileStyle(int tileID) {
-			if (tileID == 26) {
-				if (!WorldGen.crimson)
-					return 0;
-
-				return 1;
-			}
-
-			return 0;
-		}
+		#endregion
+
+		public static int GetRequiredTileStyle(int type) => type == TileID.DemonAltar && WorldGen.crimson ? 1 : 0;
 	}
 }
